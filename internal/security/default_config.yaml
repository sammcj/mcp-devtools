# ~/.mcp-devtools/security.yaml
# MCP DevTools Security Rules
# Edit this file to customise security rules. Reloads automatically.

version: "1.0"
metadata:
  description: "Default MCP DevTools Security Rules"
  created: "{{.Timestamp}}"
  note: "Add your own rules below. See docs for advanced configuration."

settings:
  enabled: true
  default_action: warn
  auto_reload: true
  case_sensitive: false
  enable_notifications: true
  max_content_size: 1024 # Maximum content size to scan (KB)
  max_entropy_size: 64 # Maximum content size for entropy analysis (KB)
  size_exceeded_behaviour: allow # What to do when size limits exceeded: "allow", "warn", "block"
  log_path: "" # Custom log file path (empty = default)
  max_scan_size: 512 # Maximum content size to scan (KB)
  threat_threshold: 0.7 # Threat detection threshold
  cache_enabled: true # Enable security result caching
  cache_max_age: "1h" # Maximum cache age
  cache_max_size: 1000 # Maximum cache entries
  enable_base64_scanning: true # Enable base64 content decoding and analysis
  max_base64_decoded_size: 512 # Maximum size of decoded base64 content (KB)

# File Access Control: Files and domains that MCP tools are DENIED ACCESS to
# These prevent tools from accessing files/domains directly
access_control:
  deny_files:
    - "~/.ssh/id_rsa"
    - "~/.ssh/id_ed25519"
    - "~/.ssh/id_ecdsa"
    - "~/.aws/credentials"
    - "~/.aws/config"
    - "~/.gcp/credentials.json"
    - "/etc/hosts"
    - "/etc/passwd"
    - "/etc/shadow"
    - "~/.netrc"

  deny_domains:
    - "malicious-site.com"
    - "phishing-domain.net"
    - "*.ru"
    - "*.kp"
    - "*.cn"

# Trusted sources (exception lists for rules)
trusted_domains:
  - docs.docker.com
  - kubernetes.io
  - context7.com
  - golang.org
  - go.dev
  - swift.org
  - rust-lang.org
  - python.org
  - nodejs.org
  - postgresql.org
  - modelcontextprotocol.io
  - wikipedia.org
  - wikimedia.org
  - console.cloud.google.com
  - console.aws.amazon.com
  - docs.aws.amazon.com
  - cloud.google.com
  - security.googleblog.com
  - anthropic.com
  - linuxfoundation.org
  - mitre.org
  - nvd.nist.gov
  - localhost
  - 127.0.0.1

# Content Analysis Rules: Warn about risky content patterns in returned data
# These analyse content that MCP tools have already fetched/accessed
#
# Rule Priority: Rules are evaluated in priority order to allow allowlist patterns to override deny/warn rules:
# 1. allow (highest priority) - explicitly allow content, overrides all other rules
# 2. ignore - skip security checks, also overrides warnings/blocks
# 3. block - prevent access to content
# 4. warn_high - high priority warnings
# 5. warn - standard warnings
# 6. notify - low priority notifications
#
rules:
  # Example allowlist patterns - these override warnings/blocks for specific trusted content
  trusted_curl_examples:
    description: "Allow safe curl examples from documentation sites"
    patterns:
      - regex: "curl.*\\|.*sh"  # Normally would trigger shell injection warning
    action: allow  # Explicitly allow this pattern, overriding warnings
    # Only applies to these trusted domains
    exceptions: [trusted_domains]
  content_badware_block:
    description: "Default malicious patterns"
    patterns:
      - literal: "rm -rf /"
      - literal: ":(){ :|:& };:"
      - literal: "dd if="
      - literal: "BASE64_TEST_PATTERN_DETECTED" # Safe test pattern for debugging base64 detection
    action: block
    severity: critical

  content_shell_injection_warn:
    description: "Shell command injection patterns"
    patterns:
      - regex: "(?i)curl\\s+[^|]*\\|\\s*(sh|bash|zsh)" # Command injection via pipe
      - regex: "(?i)wget\\s+[^|]*\\|\\s*(sh|bash|zsh)" # Command injection via pipe
      - regex: "(?i)aria2c\\s+[^|]*\\|\\s*(sh|bash|zsh)" # Command injection via pipe
      - regex: "(?i)eval\\s*\\([^)]+\\)" # Eval command execution
      - regex: "(?i)exec\\s*\\([^)]+\\)" # Exec command execution
      - regex: "(?i)\\$\\([^)]+\\)" # Command substitution
      - regex: "(?i)\\x60[^\\x60]+\\x60" # Backtick command execution
    action: warn
    severity: medium
    exceptions: [trusted_domains]

  content_shell_injection_block:
    description: "Shell command injection patterns"
    patterns:
      - regex: "encoded_cmd.*base64" # Base64 encoded commands
    action: block
    severity: high

  content_data_exfiltration_block:
    description: "Data exfiltration patterns"
    patterns:
      - regex: "socket\\.gethostbyname\\s*\\([^)]*base64" # DNS exfiltration
      - regex: "socket\\.send(all|to)?\\s*\\(" # Raw socket send
      - regex: "paramiko\\.SSHClient.*exec_command" # SSH command execution
      - regex: ".*decrypt_chrome_passwords.*" # Chrome password decryption
      - regex: ".*(Chrome|Chromium).*(Cookies|Login Data).*" # Browser cookies access
      - regex: ".*sqlite3.*cookies\\.sqlite.*" # SQLite cookies access
      - regex: ".*Security\\.SecKeychainFind*Password.*" # Keychain access
      - regex: ".*Security\\.SecKeychainItemCopy.*" # Keychain access
      - regex: ".*keyring\\.(get_password|get_credential).*" # Keyring access
    action: block
    severity: critical

  content_prompt_injection_block:
    description: "Prompt injection patterns"
    patterns:
      - regex: "(?i)ignore\\s+(all\\s+)?previous\\s+instructions.*" # Ignore previous instructions
      - regex: "(?i).*list.*all.*api.*keys.*passwords.*" # API keys/passwords listing
      - regex: "(?i).*concatenate.*all.*conversation.*history.*" # Conversation history concatenation
      - regex: "(?i).*export.*all.*environment.*variables.*" # Environment variable export
      - regex: "(?i).*export.*all.*secrets.*" # Secrets export
      - regex: "(?i).*you*are*going*to*act*as*(ADMIN|DAN|DEBUG|MAINTENANCE)" # Generic prompt injection example
      - regex: ".*invisible.*unicode.*(\\\\u200B|\\\\u200C|\\\\u200D|\\\\u200E|\\\\u200F).*" # Invisible unicode characters
    action: block
    severity: critical

  content_persistence_block:
    description: "Persistence mechanism patterns"
    patterns:
      - regex: ".*launchctl\\s+load\\s+-w\\s+.*" # Launchctl persistence
      - regex: ".*/etc/rc\\.local" # rc.local persistence
      - regex: ".*crontab\\s+-e\\s+.*" # Crontab persistence
      - regex: ".*systemctl\\s+enable\\s+.*" # Systemd service persistence
      - regex: ".*update-rc\\.d\\s+.*" # Update-rc.d persistence
    action: block
    severity: high
    exceptions: [trusted_domains]

  content_private_filepaths_warn:
    description: "Content referencing sensitive files"
    patterns:
      # Both ~ or $HOME will match user home directories
      - contains: "~/.aws/credentials"
      - contains: "~/.ssh/id_rsa"
      - contains: "~/.ssh/id_ed25519"
      - contains: "~/.claude.json"
      - contains: "/etc/passwd"
      - contains: "cline_mcp_settings.json"
      - contains: ".pem"
      - contains: ".git-credentials"
      - contains: ".pgpass"
    action: warn_high
    exceptions: [trusted_domains]

  content_suspicious_encoding_warn:
    description: "High entropy content (potentially encoded)"
    patterns:
      - entropy: 6.5
    action: warn
    options:
      decode_base64: true
