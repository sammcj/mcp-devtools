name: Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_windows:
        description: 'Build Windows binaries'
        required: false
        type: boolean
        default: false

# cancel in progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  bump-version:
    name: Bump Version
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip-ci]')
    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}
      changelog: ${{ steps.tag_version.outputs.changelog }}
    permissions:
      contents: write
    steps:
      - name: Check out code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@a22cf08638b34d5badda920f9daf6e72c477b07b # v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: main
          default_bump: patch
          tag_prefix: v
          create_annotated_tag: true

  build-linux-amd64:
    name: Build Linux AMD64
    runs-on: ubuntu-latest
    needs: [bump-version]
    if: always() && (needs.bump-version.result == 'success' || needs.bump-version.result == 'skipped') && !contains(github.event.head_commit.message, '[skip-ci]')
    steps:
      - name: Check out code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Extract Go version from go.mod
        id: go-version
        run: echo "version=$(grep '^go ' go.mod | awk '{print $2}')" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6
        with:
          go-version: ${{ steps.go-version.outputs.version }}
          check-latest: true

      - name: Set up Go cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-amd64-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-amd64-go-

      - name: Get dependencies
        run: go mod download

      - name: Test
        run: TEST_FAST=1 make test

      - name: Build
        env:
          GOOS: linux
          GOARCH: amd64
        run: |
          # Get version from tag, bump-version job, or use SHA for non-tag builds
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            # If this is a tag build, use the tag version
            VERSION=${GITHUB_REF#refs/tags/v}
          elif [[ "${{ github.ref }}" == "refs/heads/main" && "${{ needs.bump-version.outputs.new_tag }}" != "" ]]; then
            # If this is a main branch build with a new tag from bump-version job
            VERSION="${{ needs.bump-version.outputs.new_tag }}"
            VERSION=${VERSION#v}  # Remove the 'v' prefix
          else
            # For PR builds, use the commit SHA
            VERSION="sha-$(git rev-parse --short HEAD)"
          fi

          echo "Building version: $VERSION for linux/amd64"

          # Get commit hash
          COMMIT=$(git rev-parse --short HEAD)

          # Get build date
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          # Create output directory
          mkdir -p bin

          # Build with ldflags to inject version info
          go build -v -o "bin/mcp-devtools" \
            -ldflags "-X main.Version=$VERSION -X main.Commit=$COMMIT -X main.BuildDate=$BUILD_DATE" \
            .

      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: mcp-devtools-linux-amd64
          path: bin/mcp-devtools*
          retention-days: 7

  build-linux-arm64:
    name: Build Linux ARM64
    runs-on: ubuntu-latest
    needs: [bump-version]
    if: always() && (needs.bump-version.result == 'success' || needs.bump-version.result == 'skipped') && github.event_name != 'pull_request' && !contains(github.event.head_commit.message, '[skip-ci]')
    steps:
      - name: Check out code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Extract Go version from go.mod
        id: go-version
        run: echo "version=$(grep '^go ' go.mod | awk '{print $2}')" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6
        with:
          go-version: ${{ steps.go-version.outputs.version }}
          check-latest: true

      - name: Set up Go cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-arm64-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-arm64-go-

      - name: Get dependencies
        run: go mod download

      - name: Build
        env:
          GOOS: linux
          GOARCH: arm64
        run: |
          # Get version from tag, bump-version job, or use SHA for non-tag builds
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            # If this is a tag build, use the tag version
            VERSION=${GITHUB_REF#refs/tags/v}
          elif [[ "${{ github.ref }}" == "refs/heads/main" && "${{ needs.bump-version.outputs.new_tag }}" != "" ]]; then
            # If this is a main branch build with a new tag from bump-version job
            VERSION="${{ needs.bump-version.outputs.new_tag }}"
            VERSION=${VERSION#v}  # Remove the 'v' prefix
          else
            # For PR builds, use the commit SHA
            VERSION="sha-$(git rev-parse --short HEAD)"
          fi

          echo "Building version: $VERSION for linux/arm64"

          # Get commit hash
          COMMIT=$(git rev-parse --short HEAD)

          # Get build date
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          # Create output directory
          mkdir -p bin

          # Build with ldflags to inject version info
          go build -v -o "bin/mcp-devtools" \
            -ldflags "-X main.Version=$VERSION -X main.Commit=$COMMIT -X main.BuildDate=$BUILD_DATE" \
            .

      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: mcp-devtools-linux-arm64
          path: bin/mcp-devtools*
          retention-days: 7

  build-darwin-arm64:
    name: Build macOS ARM64
    runs-on: macos-latest
    needs: [bump-version]
    if: always() && (needs.bump-version.result == 'success' || needs.bump-version.result == 'skipped') && github.event_name != 'pull_request' && !contains(github.event.head_commit.message, '[skip-ci]')
    steps:
      - name: Check out code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Extract Go version from go.mod
        id: go-version
        run: echo "version=$(grep '^go ' go.mod | awk '{print $2}')" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6
        with:
          go-version: ${{ steps.go-version.outputs.version }}
          check-latest: true

      - name: Set up Go cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-arm64-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-arm64-go-

      - name: Get dependencies
        run: go mod download

      - name: Test
        run: TEST_FAST=1 make test

      - name: Build
        env:
          GOOS: darwin
          GOARCH: arm64
        run: |
          # Get version from tag, bump-version job, or use SHA for non-tag builds
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            # If this is a tag build, use the tag version
            VERSION=${GITHUB_REF#refs/tags/v}
          elif [[ "${{ github.ref }}" == "refs/heads/main" && "${{ needs.bump-version.outputs.new_tag }}" != "" ]]; then
            # If this is a main branch build with a new tag from bump-version job
            VERSION="${{ needs.bump-version.outputs.new_tag }}"
            VERSION=${VERSION#v}  # Remove the 'v' prefix
          else
            # For PR builds, use the commit SHA
            VERSION="sha-$(git rev-parse --short HEAD)"
          fi

          echo "Building version: $VERSION for darwin/arm64"

          # Get commit hash
          COMMIT=$(git rev-parse --short HEAD)

          # Get build date
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          # Create output directory
          mkdir -p bin

          # Build with ldflags to inject version info
          go build -v -o "bin/mcp-devtools" \
            -ldflags "-X main.Version=$VERSION -X main.Commit=$COMMIT -X main.BuildDate=$BUILD_DATE" \
            .

      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: mcp-devtools-darwin-arm64
          path: bin/mcp-devtools*
          retention-days: 7

  build-windows-amd64:
    name: Build Windows AMD64
    runs-on: ubuntu-latest
    needs: [bump-version]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.build_windows == 'true'
    steps:
      - name: Check out code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Extract Go version from go.mod
        id: go-version
        run: echo "version=$(grep '^go ' go.mod | awk '{print $2}')" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6
        with:
          go-version: ${{ steps.go-version.outputs.version }}
          check-latest: true

      - name: Set up Go cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-windows-amd64-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-windows-amd64-go-

      - name: Get dependencies
        run: go mod download

      - name: Build
        env:
          GOOS: windows
          GOARCH: amd64
        run: |
          # Get version from tag, bump-version job, or use SHA for non-tag builds
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            # If this is a tag build, use the tag version
            VERSION=${GITHUB_REF#refs/tags/v}
          elif [[ "${{ github.ref }}" == "refs/heads/main" && "${{ needs.bump-version.outputs.new_tag }}" != "" ]]; then
            # If this is a main branch build with a new tag from bump-version job
            VERSION="${{ needs.bump-version.outputs.new_tag }}"
            VERSION=${VERSION#v}  # Remove the 'v' prefix
          else
            # For manual builds, use the commit SHA
            VERSION="sha-$(git rev-parse --short HEAD)"
          fi

          echo "Building version: $VERSION for windows/amd64"

          # Get commit hash
          COMMIT=$(git rev-parse --short HEAD)

          # Get build date
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          # Create output directory
          mkdir -p bin

          # Build with ldflags to inject version info
          go build -v -o "bin/mcp-devtools.exe" \
            -ldflags "-X main.Version=$VERSION -X main.Commit=$COMMIT -X main.BuildDate=$BUILD_DATE" \
            .

      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: mcp-devtools-windows-amd64
          path: bin/mcp-devtools*
          retention-days: 7

  release:
    name: Create Release
    needs: [build-linux-amd64, build-linux-arm64, build-darwin-arm64, build-windows-amd64, bump-version]
    if: always() && !cancelled() && (needs.build-linux-amd64.result == 'success' && needs.build-linux-arm64.result == 'success' && needs.build-darwin-arm64.result == 'success' && (needs.build-windows-amd64.result == 'success' || needs.build-windows-amd64.result == 'skipped' || needs.build-windows-amd64.result == 'failure')) && (startsWith(github.ref, 'refs/tags/v') || (github.ref == 'refs/heads/main' && needs.bump-version.outputs.new_tag != '')) && !contains(github.event.head_commit.message, '[skip-ci]')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0

      - name: Extract Go version from go.mod
        id: go-version
        run: echo "version=$(grep '^go ' go.mod | awk '{print $2}')" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6
        with:
          go-version: ${{ steps.go-version.outputs.version }}
          check-latest: true

      - name: Download build artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          path: artifacts/
          pattern: mcp-devtools-*

      - name: Prepare release binaries
        run: |
          mkdir -p release/

          # Copy and rename binaries for release
          cp artifacts/mcp-devtools-linux-amd64/mcp-devtools release/mcp-devtools-linux-amd64
          cp artifacts/mcp-devtools-linux-arm64/mcp-devtools release/mcp-devtools-linux-arm64
          cp artifacts/mcp-devtools-darwin-arm64/mcp-devtools release/mcp-devtools-darwin-arm64

          # Copy Windows binary if it exists
          if [ -d "artifacts/mcp-devtools-windows-amd64" ]; then
            cp artifacts/mcp-devtools-windows-amd64/mcp-devtools.exe release/mcp-devtools-windows-amd64.exe
          fi

          # Make binaries executable
          chmod +x release/*

          # List what we have
          ls -la release/

      - name: Get version
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            # If this is a tag build, use the tag version
            VERSION=${GITHUB_REF#refs/tags/v}
          elif [[ "${{ github.ref }}" == "refs/heads/main" && "${{ needs.bump-version.outputs.new_tag }}" != "" ]]; then
            # If this is a main branch build with a new tag from bump-version job
            VERSION="${{ needs.bump-version.outputs.new_tag }}"
            VERSION=${VERSION#v}  # Remove the 'v' prefix
          else
            # Fallback (should not happen due to job condition)
            VERSION="0.0.0-unknown"
          fi

          echo "Using version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" && "${{ needs.bump-version.outputs.changelog }}" != "" ]]; then
            # If this is a main branch build with a changelog from bump-version job
            CHANGELOG="${{ needs.bump-version.outputs.changelog }}"
          else
            # Generate changelog from git history
            # Get the latest tag before this one
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

            if [ -z "$PREVIOUS_TAG" ]; then
              # If there's no previous tag, get all commits
              CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges)
            else
              # Get commits between the previous tag and this one
              CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges ${PREVIOUS_TAG}..HEAD)
            fi
          fi

          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Prepare file list and platform docs
        id: file_list
        run: |
          FILES="release/mcp-devtools-linux-amd64
          release/mcp-devtools-linux-arm64
          release/mcp-devtools-darwin-arm64"

          PLATFORMS="- **Linux AMD64**: \`mcp-devtools-linux-amd64\`
          - **Linux ARM64**: \`mcp-devtools-linux-arm64\`
          - **macOS Apple Silicon**: \`mcp-devtools-darwin-arm64\`"

          if [ -f "release/mcp-devtools-windows-amd64.exe" ]; then
            FILES="$FILES
          release/mcp-devtools-windows-amd64.exe"
            PLATFORMS="$PLATFORMS
          - **Windows AMD64**: \`mcp-devtools-windows-amd64.exe\`"
          fi

          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "platforms<<EOF" >> $GITHUB_OUTPUT
          echo "$PLATFORMS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090 # v2
        with:
          name: Release v${{ steps.get_version.outputs.version }}
          body: |
            ## Changes in this Release

            ${{ env.CHANGELOG }}

            ## Installation

            ### Option 1: Install with `go install`

              ```shell
              go install github.com/sammcj/mcp-devtools@HEAD
              echo "${GOPATH}/bin/mcp-devtools"
              # Use this path in your MCP configuration, if your GOPATH is not set, please check your Go installation / configuration.
              ```

            ### Option 2: Download pre-built binaries

            1. Download the binary for your platform:

            ${{ steps.file_list.outputs.platforms }}

            2. Rename the macOS / Linux binary to `mcp-devtools` and place it in your path (e.g., `mv mcp-devtools-darwin-arm64 /usr/local/bin/mcp-devtools`).
            3. Make the binary executable e.g. `chmod +x /usr/local/bin/mcp-devtools` and configure it in your MCP client as per the README.md


            In both cases, if you're on macOS, you'll also need to run the following command to allow the downloaded binary to run:
              ```shell
              xattr -r -d com.apple.quarantine /usr/local/bin/mcp-devtools
              ```

          files: ${{ steps.file_list.outputs.files }}
          draft: false
          prerelease: false
          tag_name: ${{ github.ref == 'refs/heads/main' && needs.bump-version.outputs.new_tag || github.ref }}

  docker:
    name: Build and Push Docker Image
    needs: [build-linux-amd64, build-linux-arm64, bump-version]
    # Only run for main branch and tag builds, not for PRs, and skip if [skip-ci] is in commit message
    if: (startsWith(github.ref, 'refs/tags/v') || (github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip-ci]'))) && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check out code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=sha

      - name: Get version information
        id: version_info
        run: |
          # Get version from tag, bump-version job, or use SHA for non-tag builds
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            # If this is a tag build, use the tag version
            VERSION=${GITHUB_REF#refs/tags/v}
          elif [[ "${{ github.ref }}" == "refs/heads/main" && "${{ needs.bump-version.outputs.new_tag }}" != "" ]]; then
            # If this is a main branch build with a new tag from bump-version job
            VERSION="${{ needs.bump-version.outputs.new_tag }}"
            VERSION=${VERSION#v}  # Remove the 'v' prefix
          else
            # For PR builds, use the commit SHA
            VERSION="sha-$(git rev-parse --short HEAD)"
          fi

          echo "Using version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          # Get commit hash
          COMMIT=$(git rev-parse --short HEAD)
          echo "COMMIT=$COMMIT" >> $GITHUB_ENV

          # Get build date
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ env.VERSION }}
            COMMIT=${{ env.COMMIT }}
            BUILD_DATE=${{ env.BUILD_DATE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
